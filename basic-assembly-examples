Structure of an Assembly 

.data 			; all initialized data
.bss  			; all uninitialized data
.text 			; program instructions
_start: 		; Main() routine
.globl _start 	; externally callable routines

@

staction .text
_start:	
	mov ecx, 99  ; set ecx to 99
	mov ebx, 42  ; exit status is 42
	mov eax, 1   ; sys_exit system call
	cmp ecx, 100 ; compare ecx to 100
	jl skip      ; jump if less than
	mov ebx, 13  ; exit status is 13

skip:
	int 0x80
	
>>42

@

staction .text
_start:	
	mov ecx, 101 ; set ecx to 101
	mov ebx, 42  ; exit status is 42
	mov eax, 1   ; sys_exit system call
	cmp ecx, 100 ; compare ecx to 100
	jl skip      ; jump if less than
	mov ebx, 13  ; exit status is 13

skip:
	int 0x80
	
>>13

@

global _start
section .text
_start:
	mov ebx, 1 	 ; start ebx at 1
	mov ecx, 4 	 ; number of iterations
label:
	add ebx, ebx ; ebx+=ebx
	dec ecx 	 ; ecx -=1
	cmp ecx, 0 	 ; compare ecx with 0
	jg label	 ; jump to label if greater
	mov eax, 1	 ; sys_exit syscam call
	int 0x80

>>16

@

global _start
section .data
	addr db "yellow"
section .text
_start:
	mov eax, 4		; sys_write system call
	mov ebx, 1 		; stdout file descriptor
	mov ecx, addr 	; bytes to write
	mov edx, 6 		; number of bytes to write
	int 0x80		; perform system call
	mov eax, 1 		; sys_exit system call
	mov ebx, 0 		; exit status is 0
	int 0x80

>>yellow

@

global _start
section .data
	addr db "yellow"
section .text
_start:
	mov [addr], byte 'H'
	mov [addr+5], byte '!'
	mov eax, 4		; sys_write system call
	mov ebx, 1 		; stdout file descriptor
	mov ecx, addr 	; bytes to write
	mov edx, 6 		; number of bytes to write
	int 0x80		; perform system call
	mov eax, 1 		; sys_exit system call
	mov ebx, 0 		; exit status is 0
	int 0x80

>>Hello!

@

global _start

_start:
	sub esp, 4
	mov [esp], byte 'H'
	mov [esp+1], byte 'e'
	mov [esp+2], byte 'y'
	mov [esp+3], byte '!'
	mov eax, 4		; sys_write system call
	mov ebx, 1		; stdout file descriptor
	mov ecx, esp 	; pointer to bytes to write
	mov edx, 4 		; number of bytes to write
	int 0x80 		; perform system call
	mov eax, 1 		; sys_exit system call
	mov ebx, 0 		; exit status is 0
	int 0x80
	
>>Hey!

@

global _start

_start:
	call func
	mov eax, 1
	int 0x80
	
func:
	mov ebx, 42
	pop eax
	jmp eax
	
>>42

@

global _start

_start:
	call func
	mov eax, 1
	int 0x80
	
func:
	mov ebx, 42
	ret

>>42

@

func:
	push ebp
	mov ebp, esp
	sub esp, 2
	mov[esp], byte 'H'
	mov[esp+1], byte 'i'
	mov eax, 4 		; sys_write system call
	mov ebx, 1 		; stdout file descriptor
	mov ecx, esp 	; bytes to write
	mov edx, 2 		; number of bytes to write
	int 0x80		; perform system call
	mov esp, ebp
	pop ebp
	ret

>>Hi

@

mov ebx, 123 ; ebx = 123
mov eax, ebx ; eax = ebx
add ebx, ecx ; ebx +=ecx
sub ebx, edx ; ebx-=edx
mul ebx 	 ; eax*=ebx
div edx 	 ; eax /=ebx

@

		EAX 
------------------- 32 bit
			AX
		----------- 16 bit
		
		  AH   AL
		----- ----- 8 bit
		
		
		EBX 
------------------- 32 bit
			BX
		----------- 16 bit
		
		  BH   BL
		----- ----- 8 bit

@

Arguments to syscalls:

EAX -System call number
EBX -First argument
ECX -Second argument
EDX -Third argument
ESI	-Fourth argument
EDI	-Fifth argument

@


EDI is used for writing
ESI is used for reading
EBX is used for extra storage
ESP register points to the very top of the stack and so it will point to the return address.

@

je 	A, B ; Jump if Equal
jne A, B ; Jump if not Equal
jg 	A, B ; Jump if Greater
jge	A, B ; Jump Greater or Equal
jl  A, B ; Jump if Less
jle A, B ; Jump if Less or Equal

@